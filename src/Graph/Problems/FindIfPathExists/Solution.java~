package src.Graph.Problems.FindIfPathExists;

import java.util.ArrayList;

public class Solution {
    public boolean validPath(int n, int[][] edges, int source, int destination) {
        ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
        for(int i=0;i<n;i++){
            graph.add(new ArrayList<>());
        }

        for(int [] edge :edges){
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);

        }

       boolean [] isVisited = new boolean[n];
        return dfs(source, destination, isVisited, graph);
    }

    private boolean dfs(int source, int destination, boolean[] isVisited, ArrayList<ArrayList<Integer>> edges) {
        if(source==destination)return true;
        isVisited[source]=true;
        for(int i: edges.get(source)){
            if(i!=source && !isVisited[i]){
                 if(dfs(i,destination,isVisited,edges)) return true;
            }
        }
        isVisited[source]=false;

        return false;
    }


}
